% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcpmap.R
\name{mcpmap}
\alias{mcpmap}
\title{Parallel map over a list using multiple cores}
\usage{
mcpmap(lists, func, num_cores = parallel::detectCores() - 1)
}
\arguments{
\item{lists}{A list of lists containing the arguments to pass to the function `func`. Each inner list should
correspond to an argument of `func`, and all lists must be of the same length.}

\item{func}{The function to apply to each set of arguments contained in `lists`.}

\item{num_cores}{The number of cores to use for parallel execution. The default is
one less than the total number of cores available on the system to leave resources
for other processes.}
}
\value{
The result of applying `func` to the elements of `lists` in parallel. The return value is a list of the
same length as the input lists, where each element is the result of applying `func` to the corresponding elements
of the input lists.
}
\description{
Applies a function in parallel over elements of a list of elements with the same length with support for multiple cores.
The function uses `parallel::mcmapply` under the hood to perform the parallel computation, automatically determining the number
of cores to use if not specified.
}
\examples{
# Define a function to apply
sum_func <- function(x, y) x + y

# Create a list of arguments
args_list <- list(c(1,2,3), c(4,5,6))

# Apply the function in parallel
results <- mcpmap(args_list, sum_func, num_cores = 2)
print(results)
}
