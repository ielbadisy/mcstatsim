% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mcpmap.R
\name{mcpmap}
\alias{mcpmap}
\title{Parallel Map Over a List Using Multiple Cores}
\usage{
mcpmap(lists, func, num_cores = parallel::detectCores() - 1)
}
\arguments{
\item{lists}{A list of lists where each inner list contains the arguments to be passed to the function `func`.
Each inner list should correspond to an argument of `func`, and all lists must have the same length.}

\item{func}{The function to apply to each set of arguments contained in `lists`.}

\item{num_cores}{The number of cores to use for parallel execution. This defaults to one less
than the total number of cores available on the system, leaving resources free for other processes.
Note: On Windows, `num_cores` is automatically set to 1 due to limitations in parallel processing support.}
}
\value{
A list of results, where each element is the result from applying `func` to the corresponding elements of
the input lists.
}
\description{
This function applies a given function in parallel over elements of a list.
It uses `parallel::mcmapply` on Unix-like systems and `parallel::parLapply` on Windows,
ensuring cross-platform compatibility.
}
\examples{
sum_func <- function(x, y) x + y
args_list <- list(c(1,2,3), c(4,5,6))
results <- mcpmap(args_list, sum_func, num_cores = 2)
print(results)
}
\keyword{parallel}
